#version 330 core

// Interpolated values from the vertex shaders
in vec3 fragmentColor;
in vec3 normal;
in vec3 fragPos;
in vec4 fragPosLightSpace;

// Ouput data
out vec4 color;

// Uniforms


uniform sampler2D shadowMap;
uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec3 viewPos;


void main(){
	vec3 norm = normalize(normal);
    vec3 lightDir = normalize(lightPosition - fragPos);
    float shadow = 0.0;
	/////Shadow calculations begin/////
	
	// perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;

    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture2D(shadowMap, projCoords.xy).r; 

    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;

    // calculate bias (based on depth map resolution and slope)
    float bias = 0.0;//max(0.05 * (1.0 - dot(norm, lightDir)), 0.005);

    // check whether current frag pos is in shadow
    //shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;

    // PCF
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;
        }    
    }
    shadow /= 9.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
    
	////Shadow calculations end/////
	float specularStrength = 0.3;
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = 0.7 * diff * lightColor;
	vec3 ambient_light = 0.3 * lightColor;
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(norm, normalize(lightDir+viewDir)), 0.0), 64);
	vec3 specular = specularStrength * spec * lightColor; 
	vec3 lighting = clamp((ambient_light + (1 - shadow) * (diffuse + specular)) * fragmentColor,0.0,1.0);
	color = vec4(lighting, 1.0);
}
