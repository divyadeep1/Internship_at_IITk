#version 330 core

// Interpolated values from the vertex shaders
in vec3 fragmentColor;
in vec3 normal;
in vec3 fragPos;

// Ouput data
out vec3 color;

uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec3 viewPos;
	
void main(){
	float specularStrength = 0.2;
	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(lightPosition - fragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = 0.4 * diff * lightColor;
	vec3 ambient_light = 1.0 * lightColor; //old value = 0.6
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(norm, normalize(lightDir+viewDir)), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor; 
	color = clamp((ambient_light + diffuse + specular) * fragmentColor,0.0,1.0);
	//color = fragmentColor;
}
