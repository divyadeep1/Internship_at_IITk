#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
//layout(location = 1) in vec3 vertexColor;
layout(location = 1) in vec3 aNormal;

// Output data will be interpolated for each fragment.
out vec3 fragmentColor;
out vec3 normal;
out vec3 fragPos;
// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 model;


void main(){	

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	fragPos = vec3(model * vec4(vertexPosition_modelspace, 1));
	// The color of each vertex will be interpolated
	// to produce the color of each fragment
	//fragmentColor = vec3(vertexPosition_modelspace.z/5.1,vertexPosition_modelspace.z/5.1,vertexPosition_modelspace.z/5.1); //Deapthwise different colors
	//fragmentColor = vec3(0.0,0.1,1.0);
	fragmentColor = vec3(1,1,1);
	if(vertexPosition_modelspace.x==100 || vertexPosition_modelspace.x==-100)
	fragmentColor = vec3(0,0,0);
	normal = mat3(transpose(inverse(model))) * aNormal;
}

