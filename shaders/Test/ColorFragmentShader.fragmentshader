#version 330 core

// Interpolated values from the vertex shaders
in vec3 fragmentColor;
in vec3 normal;
in vec3 fragPos;

// Ouput data
out vec3 color;

uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec3 viewPos;

void main(){
	float specularStrength = 0.0000001;
	vec3 norm = normalize(normal);
	vec3 lightDir = (lightPosition - fragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = 0.2 * diff * lightColor;
	vec3 ambient_light = 0.7 * lightColor;
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 8);
	vec3 specular = specularStrength * spec * lightColor; 
	// Output color = color specified in the vertex shader, 
	// interpolated between all 3 surrounding vertices
	color = (ambient_light + diffuse + specular) * fragmentColor;

}
